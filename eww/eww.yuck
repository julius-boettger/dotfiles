(defpoll date :interval "1s"
  ; json string which eww can parse automatically (` = ' = ")
  `LC_TIME=en_US.UTF-8 date '+{"time":"%R","date":"%d.%m.%y","day":"%A"}'`) 

(defpoll ram :interval "1s"
  ; in MB and percent
  :initial '{"total":0,"used":0,"used_percent":0}'
  "~/.config/eww/scripts/ram-usage.sh") 

(deflisten workspaces
  ; json array with info about all hyprland workspaces
  :initial "[]"
  "~/.config/eww/scripts/workspaces/get-all.sh")

(deflisten current-workspace
  ; current hyprland workspace as integer
  :initial 1
  "~/.config/eww/scripts/workspaces/get-active.sh")

(defwindow desktop-0 :monitor 0
  :stacking "bottom" ; below other sutff / on desktop
  :exclusive false ; dont reserve WM space
  :focusable false ; does not need keyboard input
  :geometry (geometry
              :anchor "center"
              ; small window, stretches to fit content
              :width  "1%"
              :height "1%")
  (desktop :workspace-digits 1)) ; hyprsome workspaces 1-9

; same window for other monitor, because spawning on other
; monitor with `eww open desktop-0 --screen 1` doesn't work...?
(defwindow desktop-1 :monitor 1
  :stacking "bottom"
  :exclusive false
  :focusable false
  :geometry (geometry
              :anchor "center"
              :width  "1%"
              :height "1%")
  (desktop :workspace-digits 2)) ; hyprsome workspaces 11-19

; workspace-digits: number of digits of workspace id's to show, e.g. 1 digit => workspaces 0-9
(defwidget desktop [workspace-digits] 
  (box
    :class "main-box"
    :space-evenly false
    :orientation "v"
    (workspaces :digits workspace-digits)
    (label :class "time" :text {date.time})
    (box :spacing -10
      (label :text {date.day})
      (ram)
      ;(label :text "" :style "margin-right: 0.4em") ; nixos snowflake nerdfont character
      (label :text {date.date}))))

; digits: number of digits of workspace id's to show, e.g. 1 digit => workspaces 0-9
(defwidget workspaces [digits]
  (eventbox
    :onscroll "~/.config/eww/scripts/workspaces/change-active.sh {} ${current-workspace}"
    (box
      (for workspace in {jq(workspaces, "[.[] | select(.id | length == ${digits})]")} ; filter workspaces by digits of id 
        (eventbox
          :onclick "hyprctl dispatch workspace ${workspace.id}"
          :class "workspace"
          (label :text {workspace.id == current-workspace ? "󰟒" : workspace.occupied ? "󰝥" : "" })))))) ; nerdfont characters

(defwidget ram []
  (overlay
    :tooltip "${ram.used} / ${ram.total} MB"
    (circular-progress
      :class "inner-circle"
      :value 100
      :thickness 30)
    (circular-progress
      :class "outer-circle"
      :value {ram.used_percent}
      :start-at 75
      :thickness 5)
    (label :text "" :class "circle-text" :style "margin-right: 0.3em") ; memory chip nerdfont character
  ))