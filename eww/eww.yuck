; all labels have `:show-truncated false` because of
; https://github.com/elkowar/eww/issues/1083

; optimize for laptop usage (based on env var)
(defvar is-laptop {get_env("IS_LAPTOP") == "1"})

(defpoll date :interval "1m"
  ; json string which eww can parse automatically (` = ' = ")
  :initial '{"date":"01.01.2000","day":"Monday"}'
  `LC_TIME=en_US.UTF-8 date '+{"date":"%d.%m.%y","day":"%A"}'`) 

(defpoll ram :interval "1s"
  ; in MB and percent
  :initial '{"total":0,"used":0,"used_percent":0}'
  "~/.config/eww/scripts/ram-usage.sh") 

(defpoll logarithmic-cpu :interval "1s"
  ; in percent
  :initial 0
  "~/.config/eww/scripts/logarithmic-cpu.sh") 

(defpoll battery :interval "1s"
  ; charge in percent
  :initial '{"charge":0,"time_remaining":"unknown","charging":false}'
  "~/.config/eww/scripts/battery.sh") 

(defpoll network :interval "1s"
  ; signal strength in percent
  :initial '{"internet":false,"wired":false,"signal_strength":0,"wifi_name":""}'
  "~/.config/eww/scripts/network.sh") 

(deflisten workspaces
  ; active and occupied hyprland workspaces for each monitor,
  ; e.g. {"HDMI-A-1":{"1":true},"DP-1":{"1":true}}
  :initial '{}'
  "~/.config/eww/scripts/workspaces/get-all.sh")

; monitor: name of monitor to watch workspaces, e.g. DP-1
(defwindow desktop [monitor]
  :stacking "bottom" ; below other sutff / on desktop
  :exclusive false ; dont reserve WM space
  :focusable false ; does not need keyboard input
  :namespace "eww-desktop-widget"
  :geometry (geometry
              :anchor "center"
              ; small window, stretches to fit content
              :width  "1%"
              :height "1%")
  (desktop :monitor monitor)) 

; monitor: name of monitor to watch workspaces, e.g. DP-1
(defwidget desktop [monitor] 
  (box
    :class "main-box"
    :orientation "v"
    :space-evenly false
    :spacing -10
    (box
      :space-evenly false
      :spacing 15
      (box
        :space-evenly false
        :spacing 25
        (circular-progress-fancy
          :visible {is-laptop}
          :tooltip '${battery.charge}% (${battery.time_remaining} left${battery.charging ? " to charge" : ""})'
          :value {battery.charge}
          :style {battery.charging ? "padding-left: 0.1em" : ""}
          ; a lot of battery nerdfont characters incoming
          :text {battery.charging ? (
            battery.charge < 10 ? "󰢟" :
            battery.charge < 20 ? "󰢜" :
            battery.charge < 30 ? "󰂆" :
            battery.charge < 40 ? "󰂇" :
            battery.charge < 50 ? "󰂈" :
            battery.charge < 60 ? "󰢝" :
            battery.charge < 70 ? "󰂉" :
            battery.charge < 80 ? "󰢞" :
            battery.charge < 90 ? "󰂊" :
            battery.charge < 95 ? "󰂋" : "󰂅"
          ) : (
            battery.charge < 10 ? "󰂎" :
            battery.charge < 20 ? "󰁺" :
            battery.charge < 30 ? "󰁻" :
            battery.charge < 40 ? "󰁼" :
            battery.charge < 50 ? "󰁽" :
            battery.charge < 60 ? "󰁾" :
            battery.charge < 70 ? "󰁿" :
            battery.charge < 80 ? "󰂀" :
            battery.charge < 90 ? "󰂁" :
            battery.charge < 95 ? "󰂂" : "󰁹" )})
        (circular-progress-fancy
          :visible {is-laptop}
          :tooltip {!network.internet ? "no connection" : (
            network.wired ? "wired connection" :
              'connected to ${network.wifi_name} (${network.signal_strength}% signal strength)')}
          :value {network.signal_strength}
          :style 'padding-right: 0.${network.internet && !network.wired ? 3 : 2}em'
          ; network nerdfont characters incoming
          :text {!network.internet ? "" : (
            network.wired ? "󰈀" : (
              network.signal_strength < 20 ? "󰤯" :
              network.signal_strength < 40 ? "󰤟" :
              network.signal_strength < 60 ? "󰤢" :
              network.signal_strength < 80 ? "󰤥" : "󰤨" ))})
        (circular-progress-fancy
          :visible {!is-laptop}
          :tooltip '${round(EWW_CPU.avg, 2)}%'
          :value logarithmic-cpu
          :text "" :style "padding-right: 0.35em" ; cpu nerdfont character
          :condition       {EWW_CPU.avg < 10}
          :condition-text '${round(EWW_CPU.avg, 1)}')
        (circular-progress-fancy
          :visible {!is-laptop}
          :tooltip '${ram.used} / ${ram.total} MB'
          :value {ram.used_percent}
          :text "" :style "padding-right: 0.3em" ; memory chip nerdfont character
          :condition      {ram.used < 1000}
          :condition-text {ram.used}))
      (label
        :show-truncated false
        :class "time"
        :text {formattime(EWW_TIME, "%R")}
        :tooltip {formattime(EWW_TIME, "%T")})
      (box
        :orientation "v"
        :spacing -50
        (overlay
          ; overlay with transparent longest possible value
          ; => visible box size always stays the same
          ; => no centering problems
          (label :show-truncated false :text "Wednesday" :style "color: transparent")
          (label :show-truncated false :text {date.day}))
        (label :show-truncated false :text {date.date})))
    (workspaces :monitor monitor)))

; monitor: name of monitor to watch workspaces, e.g. DP-1
(defwidget workspaces [monitor]
  (eventbox
    ; scroll through workspaces with direction like up/down and currently active workspace on that monitor
    :onscroll '~/.config/eww/scripts/workspaces/change-active.sh {} ${jq(workspaces[monitor], "to_entries | map(select(.value == true)) | .[0].key")}'
    (box
      :halign "center"
      :style "margin-left: -1px" ; better centering below ":" of time
      :space-evenly false
      :spacing 38
      ; for all workspaces per monitor
      (for i in '[1,2,3,4,5,6,7,8,9]'
        (eventbox
          :onclick 'hyprctl dispatch split-workspace ${i}'
          :tooltip {i}
          :class "workspace"
          (label
            :show-truncated false
            :style "padding-right: 0.25em"
            :text {workspaces[monitor][i] == "true"  ? "󰟒" :
                   workspaces[monitor][i] == "false" ? "󰝥" : "󰄰"})))))) ; nerdfont characters

(defwidget circular-progress-fancy [value text ?tooltip ?condition ?condition-text ?style ?visible]
  (overlay
    :visible {visible ?: true}
    :tooltip tooltip
    (circular-progress
      :class "inner-circle"
      :value 100
      :thickness 25)
    (circular-progress
      :class "outer-circle"
      :value value
      :start-at 75
      :thickness 3)
    (revealer
      :reveal {!(condition ?: false)}
      (label
        :show-truncated false
        :text text
        :style style))
    (revealer
      :reveal {condition ?: false}
      (label
        :show-truncated false
        :text condition-text
        :class "circle-condition-text"))))